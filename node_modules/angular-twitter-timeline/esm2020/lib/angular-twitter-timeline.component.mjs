import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./angular-twitter-timeline.service";
export class AngularTwitterTimelineComponent {
    constructor(element, twitterTimelineService) {
        this.element = element;
        this.twitterTimelineService = twitterTimelineService;
        this.defaultOpts = {
            tweetLimit: 5
        };
        this.defaultData = {
            sourceType: 'url',
            url: 'https://twitter.com/mustafaer_dev',
            screenName: 'Mustafa ER'
        };
    }
    ngOnChanges() {
        if (this.data && this.data.sourceType) {
            switch (this.data.sourceType) {
                case 'url':
                    delete this.defaultData.screenName;
                    break;
                case 'profile':
                    delete this.defaultData.url;
                    break;
                default:
                    break;
            }
            this.loadTwitterWidget();
        }
    }
    loadTwitterWidget() {
        this.twitterTimelineService
            .loadScript()
            .subscribe({
            next: () => {
                let nativeElement = this.element.nativeElement;
                nativeElement.innerHTML = "";
                window['twttr']
                    .widgets
                    .createTimeline({ ...this.defaultData, ...this.data }, nativeElement, { ...this.defaultOpts, ...this.opts })
                    .then(() => {
                })
                    .catch((error) => console.error(error));
            },
            error: (error) => console.error(error),
        });
    }
}
AngularTwitterTimelineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularTwitterTimelineComponent, deps: [{ token: i0.ElementRef }, { token: i1.AngularTwitterTimelineService }], target: i0.ɵɵFactoryTarget.Component });
AngularTwitterTimelineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.4", type: AngularTwitterTimelineComponent, selector: "angular-twitter-timeline", inputs: { data: "data", opts: "opts" }, usesOnChanges: true, ngImport: i0, template: ``, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularTwitterTimelineComponent, decorators: [{
            type: Component,
            args: [{ selector: 'angular-twitter-timeline', template: `` }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.AngularTwitterTimelineService }]; }, propDecorators: { data: [{
                type: Input
            }], opts: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci10d2l0dGVyLXRpbWVsaW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItdHdpdHRlci10aW1lbGluZS9zcmMvbGliL2FuZ3VsYXItdHdpdHRlci10aW1lbGluZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7OztBQVV4RSxNQUFNLE9BQU8sK0JBQStCO0lBaUIxQyxZQUNVLE9BQW1CLEVBQ25CLHNCQUFxRDtRQURyRCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25CLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBK0I7UUFaL0QsZ0JBQVcsR0FBMkM7WUFDcEQsVUFBVSxFQUFFLENBQUM7U0FDZCxDQUFDO1FBRUYsZ0JBQVcsR0FBd0M7WUFDakQsVUFBVSxFQUFFLEtBQUs7WUFDakIsR0FBRyxFQUFFLG1DQUFtQztZQUN4QyxVQUFVLEVBQUUsWUFBWTtTQUN6QixDQUFDO0lBTUYsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDckMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDNUIsS0FBSyxLQUFLO29CQUNSLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUM7b0JBQ25DLE1BQU07Z0JBQ1IsS0FBSyxTQUFTO29CQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUM7b0JBQzVCLE1BQU07Z0JBQ1I7b0JBQ0UsTUFBTTthQUNUO1lBQ0QsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsSUFBSSxDQUFDLHNCQUFzQjthQUN4QixVQUFVLEVBQUU7YUFDWixTQUFTLENBQUM7WUFDVCxJQUFJLEVBQUUsR0FBRyxFQUFFO2dCQUNULElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO2dCQUMvQyxhQUFhLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztnQkFDdkIsTUFBTyxDQUFDLE9BQU8sQ0FBQztxQkFDbkIsT0FBTztxQkFDUCxjQUFjLENBQ2IsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ3JDLGFBQWEsRUFDYixFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FDdEM7cUJBQ0EsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDWCxDQUFDLENBQUM7cUJBQ0QsS0FBSyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7WUFDaEQsQ0FBQztZQUNELEtBQUssRUFBRSxDQUFDLEtBQVUsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7U0FDNUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7NEhBM0RVLCtCQUErQjtnSEFBL0IsK0JBQStCLDZIQUhoQyxFQUFFOzJGQUdELCtCQUErQjtrQkFMM0MsU0FBUzsrQkFDRSwwQkFBMEIsWUFDMUIsRUFBRTs2SUFJSCxJQUFJO3NCQUFaLEtBQUs7Z0JBSUcsSUFBSTtzQkFBWixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbmd1bGFyVHdpdHRlclRpbWVsaW5lU2VydmljZSB9IGZyb20gXCIuL2FuZ3VsYXItdHdpdHRlci10aW1lbGluZS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBBbmd1bGFyVHdpdHRlclRpbWVsaW5lT3B0aW9uc0ludGVyZmFjZSB9IGZyb20gXCIuL2FuZ3VsYXItdHdpdHRlci10aW1lbGluZS1vcHRpb25zLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgQW5ndWxhclR3aXR0ZXJUaW1lbGluZURhdGFJbnRlcmZhY2UgfSBmcm9tIFwiLi9hbmd1bGFyLXR3aXR0ZXItdGltZWxpbmUtZGF0YS5pbnRlcmZhY2VcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYW5ndWxhci10d2l0dGVyLXRpbWVsaW5lJyxcbiAgdGVtcGxhdGU6IGBgLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJUd2l0dGVyVGltZWxpbmVDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBkYXRhPzogQW5ndWxhclR3aXR0ZXJUaW1lbGluZURhdGFJbnRlcmZhY2U7XG4gIC8qKlxuICAgKiBBIGhhc2ggb2YgYWRkaXRpb25hbCBvcHRpb25zIHRvIGNvbmZpZ3VyZSB0aGUgd2lkZ2V0XG4gICAqL1xuICBASW5wdXQoKSBvcHRzPzogQW5ndWxhclR3aXR0ZXJUaW1lbGluZU9wdGlvbnNJbnRlcmZhY2U7XG5cbiAgZGVmYXVsdE9wdHM6IEFuZ3VsYXJUd2l0dGVyVGltZWxpbmVPcHRpb25zSW50ZXJmYWNlID0ge1xuICAgIHR3ZWV0TGltaXQ6IDVcbiAgfTtcblxuICBkZWZhdWx0RGF0YTogQW5ndWxhclR3aXR0ZXJUaW1lbGluZURhdGFJbnRlcmZhY2UgPSB7XG4gICAgc291cmNlVHlwZTogJ3VybCcsXG4gICAgdXJsOiAnaHR0cHM6Ly90d2l0dGVyLmNvbS9tdXN0YWZhZXJfZGV2JyxcbiAgICBzY3JlZW5OYW1lOiAnTXVzdGFmYSBFUidcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSB0d2l0dGVyVGltZWxpbmVTZXJ2aWNlOiBBbmd1bGFyVHdpdHRlclRpbWVsaW5lU2VydmljZVxuICApIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLnNvdXJjZVR5cGUpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5kYXRhLnNvdXJjZVR5cGUpIHtcbiAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICBkZWxldGUgdGhpcy5kZWZhdWx0RGF0YS5zY3JlZW5OYW1lO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwcm9maWxlJzpcbiAgICAgICAgICBkZWxldGUgdGhpcy5kZWZhdWx0RGF0YS51cmw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLmxvYWRUd2l0dGVyV2lkZ2V0KCk7XG4gICAgfVxuICB9XG5cbiAgbG9hZFR3aXR0ZXJXaWRnZXQoKSB7XG4gICAgdGhpcy50d2l0dGVyVGltZWxpbmVTZXJ2aWNlXG4gICAgICAubG9hZFNjcmlwdCgpXG4gICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGxldCBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgbmF0aXZlRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICg8YW55PndpbmRvdylbJ3R3dHRyJ11cbiAgICAgICAgICAgIC53aWRnZXRzXG4gICAgICAgICAgICAuY3JlYXRlVGltZWxpbmUoXG4gICAgICAgICAgICAgIHsgLi4udGhpcy5kZWZhdWx0RGF0YSwgLi4udGhpcy5kYXRhIH0sXG4gICAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAgIHsgLi4udGhpcy5kZWZhdWx0T3B0cywgLi4udGhpcy5vcHRzIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpLFxuICAgICAgfSk7XG4gIH1cblxufVxuIl19
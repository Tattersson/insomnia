import { Injectable } from '@angular/core';
import { Observable } from "rxjs";
import * as i0 from "@angular/core";
export class AngularTwitterTimelineService {
    constructor() {
        this.TWITTER_SCRIPT_ID = 'twitter-wjs';
        this.TWITTER_WIDGET_URL = 'https://platform.twitter.com/widgets.js';
    }
    loadScript() {
        return new Observable((observer) => {
            this.startScriptLoad();
            window['twttr'].ready((twttr) => {
                observer.next(twttr);
                observer.complete();
            });
        });
    }
    startScriptLoad() {
        window['twttr'] = (function (d, s, id, url) {
            let script, firstScriptEl = d.getElementsByTagName(s)[0], twitterScript = window['twttr'] || {};
            if (d.getElementById(id)) {
                return twitterScript;
            }
            script = d.createElement(s);
            script.id = id;
            script.src = url;
            firstScriptEl.parentNode.insertBefore(script, firstScriptEl);
            twitterScript._e = [];
            twitterScript.ready = function (f) {
                twitterScript._e.push(f);
            };
            return twitterScript;
        }(document, 'script', this.TWITTER_SCRIPT_ID, this.TWITTER_WIDGET_URL));
    }
}
AngularTwitterTimelineService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularTwitterTimelineService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AngularTwitterTimelineService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularTwitterTimelineService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: AngularTwitterTimelineService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci10d2l0dGVyLXRpbWVsaW5lLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLXR3aXR0ZXItdGltZWxpbmUvc3JjL2xpYi9hbmd1bGFyLXR3aXR0ZXItdGltZWxpbmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBS2xDLE1BQU0sT0FBTyw2QkFBNkI7SUFIMUM7UUFJVSxzQkFBaUIsR0FBRyxhQUFhLENBQUM7UUFDbEMsdUJBQWtCLEdBQUcseUNBQXlDLENBQUM7S0FzQ3hFO0lBcENDLFVBQVU7UUFDUixPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFFakMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBRWpCLE1BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFVLEVBQUUsRUFBRTtnQkFDMUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBRUwsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sZUFBZTtRQUNmLE1BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRztZQUMvQyxJQUFJLE1BQVcsRUFDYixhQUFhLEdBQVEsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqRCxhQUFhLEdBQWMsTUFBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNwRCxJQUFJLENBQUMsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ3hCLE9BQU8sYUFBYSxDQUFDO2FBQ3RCO1lBRUQsTUFBTSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDZixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNqQixhQUFhLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFN0QsYUFBYSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFFdEIsYUFBYSxDQUFDLEtBQUssR0FBRyxVQUFVLENBQU07Z0JBQ3BDLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQztZQUVGLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7OzBIQXZDVSw2QkFBNkI7OEhBQTdCLDZCQUE2QixjQUY1QixNQUFNOzJGQUVQLDZCQUE2QjtrQkFIekMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhclR3aXR0ZXJUaW1lbGluZVNlcnZpY2Uge1xuICBwcml2YXRlIFRXSVRURVJfU0NSSVBUX0lEID0gJ3R3aXR0ZXItd2pzJztcbiAgcHJpdmF0ZSBUV0lUVEVSX1dJREdFVF9VUkwgPSAnaHR0cHM6Ly9wbGF0Zm9ybS50d2l0dGVyLmNvbS93aWRnZXRzLmpzJztcblxuICBsb2FkU2NyaXB0KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuXG4gICAgICB0aGlzLnN0YXJ0U2NyaXB0TG9hZCgpO1xuXG4gICAgICAoPGFueT53aW5kb3cpWyd0d3R0ciddLnJlYWR5KCh0d3R0cjogYW55KSA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQodHd0dHIpO1xuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRTY3JpcHRMb2FkKCkge1xuICAgICg8YW55PndpbmRvdylbJ3R3dHRyJ10gPSAoZnVuY3Rpb24gKGQsIHMsIGlkLCB1cmwpIHtcbiAgICAgIGxldCBzY3JpcHQ6IGFueSxcbiAgICAgICAgZmlyc3RTY3JpcHRFbDogYW55ID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSxcbiAgICAgICAgdHdpdHRlclNjcmlwdDogYW55ID0gKDxhbnk+d2luZG93KVsndHd0dHInXSB8fCB7fTtcbiAgICAgIGlmIChkLmdldEVsZW1lbnRCeUlkKGlkKSkge1xuICAgICAgICByZXR1cm4gdHdpdHRlclNjcmlwdDtcbiAgICAgIH1cblxuICAgICAgc2NyaXB0ID0gZC5jcmVhdGVFbGVtZW50KHMpO1xuICAgICAgc2NyaXB0LmlkID0gaWQ7XG4gICAgICBzY3JpcHQuc3JjID0gdXJsO1xuICAgICAgZmlyc3RTY3JpcHRFbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGZpcnN0U2NyaXB0RWwpO1xuXG4gICAgICB0d2l0dGVyU2NyaXB0Ll9lID0gW107XG5cbiAgICAgIHR3aXR0ZXJTY3JpcHQucmVhZHkgPSBmdW5jdGlvbiAoZjogYW55KSB7XG4gICAgICAgIHR3aXR0ZXJTY3JpcHQuX2UucHVzaChmKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB0d2l0dGVyU2NyaXB0O1xuICAgIH0oZG9jdW1lbnQsICdzY3JpcHQnLCB0aGlzLlRXSVRURVJfU0NSSVBUX0lELCB0aGlzLlRXSVRURVJfV0lER0VUX1VSTCkpO1xuICB9XG59XG4iXX0=